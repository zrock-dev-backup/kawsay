package "Registrar" <<actorboundary>> {
rectangle "Generate module timetable" as G_Timetable <<Goal>>
    rectangle "Collect module required courses" as T_CollectModule <<Task>>
    rectangle "Allocate Timeslots" as T_Allocate <<Task>>
    rectangle "Assign a teacher to a class" as T_FindTeacher <<Task>>
    rectangle "Verify timeslot is free" as T_VerifyTimeslotFree <<Task>>

	G_Timetable <|-- T_CollectModule: means-end
    G_Timetable <|-- T_Allocate: means-end
	T_Allocate --o T_FindTeacher: decomposes into
	T_Allocate --o T_VerifyTimeslotFree: decomposes into


rectangle "Enroll students that need to repeat a class" as G_Manual <<Goal>>
    rectangle "Collect list of students that have failed a specific class" as T_CollectFailedStudents <<Task>>
    rectangle "Create class" as T_CreateClass <<Task>>
    rectangle "When enrolling a student review he/she is available" as T_ReviewStudentAvailability <<Task>>

	G_Manual <|-- T_CollectFailedStudents: means-end
	G_Manual <|-- T_CreateClass: means-end
	G_Manual <|-- T_ReviewStudentAvailability: means-end


rectangle "Enroll a cohort in a module" as G_CohortEnrollment <<Goal>>
    rectangle "Select available faculty practitioner" as T_SelectFaculty <<Task>>
    rectangle "Enroll a section of a cohort to a class" as T_SectionEnrollment <<Task>>
    rectangle "Select available professor" as T_SelectProfessor <<Task>>
    rectangle "Enroll a group of a cohort to a class" as T_GroupEnrollement <<Task>>

	G_CohortEnrollment <|-- T_SectionEnrollment: means-end
	G_CohortEnrollment <|-- T_GroupEnrollement: means-end
	T_SectionEnrollment --o T_SelectFaculty: decomposes into
	T_GroupEnrollement --o T_SelectProfessor: decomposes into


rectangle "Plan new classes to open" as G_PlanClassesOpen <<Goal>>
rectangle "Assess Cohort Enrollment Status" as G_StudentEnrollmentStatus <<Goal>>
    rectangle "Collect class pre-requirements" as T_CollectClassPreRequirements <<Task>>
    rectangle "Collect student's GPA and SAP grading" as T_CollectStudentGrades <<Task>>
    rectangle "Predict student eligibility as Yes, Maybe or No" as T_PredictEligibility <<Task>>

	G_PlanClassesOpen <|-- G_StudentEnrollmentStatus: means-end
	G_StudentEnrollmentStatus --o T_PredictEligibility: decomposes into
	G_StudentEnrollmentStatus --o T_CollectStudentGrades: decomposes into
	G_StudentEnrollmentStatus --o T_CollectClassPreRequirements: decomposes into

/'
++ (MAKE)  | stronly positive
+  (HELP)  | positive
-  (HURT)  | negative
-- (BREAK) | stronly negative
'/
cloud "Minimize Administrative Overhead" as SG_Overhead <<Softgoal>>
    T_ReviewStudentAvailability ..> SG_Overhead: - (HURT)
    T_Allocate ..> SG_Overhead: - (HURT)

cloud "Ensure no teacher double booking" as SG_NoTeacherClash <<Softgoal>>
	T_Allocate ..> SG_NoTeacherClash: + (MAKE)

' RESOURCE USAGE
database "Teaching staff data" as R_TeacherData <<Resource>>
	T_FindTeacher --> R_TeacherData: uses

database "Student Data" as R_StudentData <<Resource>>
	T_PredictEligibility --> R_StudentData
	T_CollectStudentGrades --> R_StudentData
}
