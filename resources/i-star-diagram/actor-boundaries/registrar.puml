@startuml
!include ../style.puml
skinparam linetype ortho

actor Teacher
actor Student
actor "Academic Coordinator" AS coordinator
actor "Student Information System" AS SIS
actor "Student Services" AS SS

rectangle "Enrolled in course" as G_Enrolled <<Goal>>
	Student --> G_Enrolled
database "Teaching staff to be hired" as R_RequiredTeachers <<Resource>>
	coordinator <-- R_RequiredTeachers

package "Registrar" <<actorboundary>> {
	rectangle "Enroll student to course" as T_EnrollStudent <<Task>>
		G_Enrolled <|-- T_EnrollStudent: means-end

    rectangle "Verify student timeslot availability" as T_ReviewStudentAvailability <<Task>>
    rectangle "Assign a teacher (faculty practicioner or professor) to a class" as T_FindTeacher <<Task>>
    rectangle "Create class on timetable in a defined period boundary" as T_Allocate <<Task>>
		T_EnrollStudent --o T_Allocate: decomposes into
		T_Allocate --o T_FindTeacher: decomposes into
		T_Allocate --o T_ReviewStudentAvailability: decomposes into

rectangle "Plan new courses to be open next module" as T_PlanNewCourses <<Task>>
	R_RequiredTeachers <-- T_PlanNewCourses: produces
rectangle "Collect list of students that can be enrrolled in next courses" <<Task>> as T_CreateCourses
	T_PlanNewCourses --o T_CreateCourses: decomposes into
rectangle "Collect list of courses to be repeated" as T_FailedStudents <<Task>>
	T_PlanNewCourses --o T_FailedStudents: decomposes into

/'
++ (MAKE)  | stronly positive
+  (HELP)  | positive
-  (HURT)  | negative
-- (BREAK) | stronly negative
'/
cloud "Minimize Administrative Overhead" as SG_Overhead <<Softgoal>>
    SG_Overhead <.. T_ReviewStudentAvailability: - (HURT)
    SG_Overhead <.. T_Allocate: - (HURT)
    T_PlanNewCourses ..> SG_Overhead: + (HELP)

cloud "Reduce student double booking" as SG_AvoidStudentDoubleBooking <<Softgoal>>
    T_ReviewStudentAvailability ..> SG_AvoidStudentDoubleBooking: + (MAKE)
}
database "Module timetable" as R_CourseTimetableInfo <<Resource>>
	R_CourseTimetableInfo <-- T_Allocate: produces
	Teacher --> R_CourseTimetableInfo
	Student --> R_CourseTimetableInfo
database "Student Data" as R_StudentData <<Resource>>
	T_CreateCourses --> R_StudentData: uses
	R_StudentData --> SIS
database "Hired teachers data" as R_HiredTeacherData <<Resource>>
	R_HiredTeacherData <-- T_FindTeacher: uses
	coordinator <-- R_HiredTeacherData
cloud "Resolve Student Enrollment & Timetable Issues" as SG_ResolveIssues <<Softgoal>>
	SG_ResolveIssues <-- SS
	T_ReviewStudentAvailability ..> SG_ResolveIssues: + (MAKE)
	T_EnrollStudent ..> SG_ResolveIssues: + (MAKE)


@enduml
