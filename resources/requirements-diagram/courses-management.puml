@startuml
!include ./style.puml

package "Course" {
    stereotype "Academic map graphical view" AS course_dependencyGraphView {
        {field} overview: I as a registrar want the system to show me a graphical view of the academic map dependencies, so that I can asses if courses depedencies are correct.
    }
    stereotype "Course dependency" AS course_dependency {
        {field} overview: I as a registrar want to register that a course depends in other courses.
    }
	course_dependency <.. course_dependencyGraphView: <<drvReqt>>
    stereotype "Course assignation" AS course_assignation {
        {field} overview: As a registrar want to set in which term a course is available.
    }
    stereotype "Course" AS course {
        {field} overview: I as a registrar want to create/update/delete courses of the Commercial Software Engineering career.
    }
	course <.. course_dependency: <<drvReqt>>
	course +-- course_assignation
}

package "Enrollment Analysis" AS pk_enrollmentAnalysis {
    stereotype "Enrollment Hint" AS hint_clash_enrollment {
        {field} overview: If the system identifies an enrollment clash it should hint the user another timeslot, that is a the same class subject but in another timesslot.
    }
    stereotype "Enrollment clash alert" AS notification_clashStudentEnrollment {
        {field} overview: As a registrar I want to receive an alert when attempting to enroll an already booked student.
    }
    stereotype "Student timeslot availability evaluation" AS clash_studentEnrollment {
        {field} overview: Before enrolling student to class, system should verify if the student isn't already enrolled in another class at the same timeslot.
    }
	clash_studentEnrollment <.. notification_clashStudentEnrollment: <<drvReqt>>
	clash_studentEnrollment <.. hint_clash_enrollment: <<drvReqt>>
    stereotype "Course pass/fail forecasting hint" AS eligibility_forecasting {
        {field} overview: When opening next module, grading notes are not in yet, in this situation registrar office ponders if the student should be enrolled. System should do the forecasting based on GPA and SPA.
    }
    stereotype "Course dependency evaluation" AS eligibility_courseDepedency {
        {field} overview: I as a registrar want the sytem to notify me if a student doesn't have the necessary courses required to take the course.
    }
	eligibility_courseDepedency <.. eligibility_forecasting
    stereotype "Student eligibility status" AS student_eligibilityStatus {
        {field} overview: I as registrar want to have a view of a student eligibility, showing timeslot availability and pre-requisite course.
    }
	student_eligibilityStatus +-- eligibility_courseDepedency
	student_eligibilityStatus +-- clash_studentEnrollment
}


package "Enrollment" AS pkg_enrollment {
    stereotype "Student selection" AS student_selection {
        {field} overview: I as registrar want to select a student from a list, so that him/her would be enrolled to it.
    }
    stereotype "Collect list of failed students" {
        {field} overview:
    }
    stereotype "Automatically advance students to next course" {
        {field} overview:
    }
    stereotype "Enrollment compliance" AS enrollment_compliance {
        {field} overview: Ensure student is enrolled in 3 courses, taking into account ESP
    }
    stereotype "Force enrollment" AS enrollment_forced {
        {field} overview: I as registrar want to forcibly enroll a student so that he/she can be enrolled because of a management decision.
		{field} A forced enrollment should have a justification.
		{field} Registrar should be able to select a pre-made justification.
    }
    stereotype "Notifications" AS notifications {
        {field} overview: I as registrar want to receive notifications when attempting to enroll a student and: student isn't available for timeslot, student doesn't have pre-requisite courses.
    }
    stereotype "Enrollment" AS enrollment {
        {field} overview: I as registrar want to enroll students in a class.
    }
	enrollment +-- enrollment_forced
	enrollment +-- notifications
}

package "Module report" AS module {
    stereotype "Auto student advance" AS module_autoAdvance {
        {field} overview: I as registrar want to automatically advance students
    }
    stereotype "Student list" AS module_studentView {
        {field} overview: I as registrar want a list of students in two groups, passed and failed.
    }
    stereotype "End module button" AS module_end {
        {field} overview: Press button to mark module as ended. This is the first step of new module process.
    }
    stereotype "Module student management" AS module_mgmt {
        {field} overview: I as Registrar want a view to manage the students.
    }
}

@enduml
    stereotype "" AS {
		{field} id:
        {field} overview:
    }
