@startuml
!include ./style.puml

package "Course" {
    stereotype "Academic map graphical view" AS course_dependencyGraphView {
        {field} overview: I as a registrar want the system to show me a graphical view of the academic map dependencies, so that I can asses if courses depedencies are correct.
    }
    stereotype "Course dependency" AS course_dependency {
        {field} overview: I as a registrar want to register that a course depends in other courses.
    }
	course_dependency <.. course_dependencyGraphView: <<drvReqt>>
    stereotype "Course assignation" AS course_assignation {
        {field} overview: As a registrar want to set in which term a course is available.
    }
    stereotype "Course" AS course {
        {field} overview: I as a registrar want to create/update/delete courses of the Commercial Software Engineering career.
    }
	course <.. course_dependency: <<drvReqt>>
	course +-- course_assignation
}

package "Enrollment" AS pkg_enrollment {
    stereotype "Student selection" AS student_selection {
        {field} overview: I as registrar want to select a student from a list, so that him/her would be enrolled to it.
    }
    stereotype "Grade Ingestion & Synchronization" AS grade_ingestion {
        {field} overview: The system will ingest student grades from the SIS or a Teacher-provided source. This process is triggered when a module is marked as 'Ended' and serves as the data foundation for student segmentation.
    }
    stereotype "Retake Enrollment Management" AS retake_mgmt {
        {field} overview: For the 'Requires Retake' cohort, the system will aggregate demand per course and guide the Registrar through creating the necessary retake classes and bulk-enrolling the cohort.
    }
    stereotype "Enrollment compliance" AS enrollment_compliance {
        {field} overview: Ensure student is enrolled in 3 courses, taking into account ESP
    }
    stereotype "Force enrollment" AS enrollment_forced {
        {field} overview: I as registrar want to forcibly enroll a student so that he/she can be enrolled because of a management decision.
		{field} A forced enrollment should have a justification.
		{field} Registrar should be able to select a pre-made justification.
    }
    stereotype "Notifications" AS notifications {
        {field} overview: I as registrar want to receive notifications when attempting to enroll a student and: student isn't available for timeslot, student doesn't have pre-requisite courses.
    }
    stereotype "Enrollment" AS enrollment {
        {field} overview: I as registrar want to enroll students in a class.
    }
	enrollment +-- enrollment_forced
	enrollment +-- notifications
    enrollment +-- retake_mgmt
}

package "Module Report" AS module {
    stereotype "Guided Bulk Advancement" AS module_autoAdvance {
        {field} overview: For the 'Ready for Advancement' cohort, the system will propose and pre-validate enrollment into the next logical courses based on the academic map. The Registrar can confirm the bulk enrollment in a single action.
    }
    stereotype "Student Cohort Segmentation" AS module_studentView {
        {field} overview: Upon module end, the system will automatically process ingested grades to segment students into two cohorts: 'Ready for Advancement' and 'Requires Retake'.
    }
    stereotype "End module button" AS module_end {
        {field} overview: Press button to mark module as ended. This is the first step of new module process.
    }
    stereotype "Module student management" AS module_mgmt {
        {field} overview: I as Registrar want a view to manage the students.
    }
    module_mgmt +-- module_studentView
    module_mgmt +-- module_autoAdvance
    module_studentView <.. grade_ingestion : <<drvReqt>>
    module_end <.. grade_ingestion : <<drvReqt>>
}

@enduml
