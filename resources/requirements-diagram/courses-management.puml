@startuml
skinparam wrapwidth 200
skinparam defaultFontName Helvetica

skinparam class {
    BackgroundColor<<Requirement>> Beige
    BackgroundColor<<ActiveDevelopment>> Yellow
}


package "Timetable generation" {
    stereotype "Creation hint" AS hint_custom_class{
        {field} overview: System should hint registrar of available timeslots and teachers.
    }
    stereotype "Custom class creation" AS custom_class {
        {field} overview: I as a registrar want to create a custom class so that it is possible to accomodate failed students.
    }
	custom_class <.. hint_custom_class: <<drvReqt>>
	NOTE LEFT OF custom_class
		Scenario example:
			student fails a class and has to take it again.
		In this case Registrar will create a custom class.
	END NOTE
    stereotype "Class-Teacher Timetabling" AS gen_2 {
        {field} overview: I as Registrar want the system to generate a class timetable for the students of a module.
    }
	NOTE LEFT OF gen_2
		Distribute group and sections so that no teacher and no class should have no simultaneous lessons.
	END NOTE
    stereotype "Faculty timetabling" AS gen_1  {
        {field} overview: As a Registrar I want the system to generate a timetable where teachers have been assigned to a class taking into account their availability and our preference of time.
    }
	NOTE LEFT OF gen_1
		Distribute courses between instructors under specified conditions.
	END NOTE
    stereotype "Automated timetable generation" AS module_population{
        {field} overview: As a Registrar I want the system to generate an academic timetable of the module
    }
	module_population +-- gen_1
	module_population +-- gen_2
    stereotype "Module view" AS module_view {
        {field} overview: As registrar I want to have a view of a module.
    }
    stereotype "Open a new module" AS academic_module {
        {field} overview: I as registrar want to open a module.
    }
	academic_module +-- module_population
	academic_module +-- custom_class
	academic_module <.. module_view: <<drvReqt>>
	/'
	NOTE LEFT OF academic_module
		A module can have a maximum of 3 courses per group. Students are required to pass prerequisite courses in order to be enrolled in the next module.
	END NOTE
	'/
    stereotype "Term view" AS term_view {
        {field} overview: As registrar I want to have a view of a term.
    }
    stereotype "Open a new Term" AS academic_term {
        {field} overview: I as registrar want to open a new term for a cohort.
    }
	academic_term +-- academic_module
	academic_term <.. term_view: <<drvReqt>>
}

package "Course" {
    stereotype "Academic map graphical view" AS course_dependencyGraphView {
        {field} overview: I as a registrar want the system to show me a graphical view of the academic map dependencies, so that I can asses if courses depedencies are correct.
    }
    stereotype "Course dependency" AS course_dependency {
        {field} overview: I as a registrar want to register that a course depends in other courses.
    }
	course_dependency <.. course_dependencyGraphView: <<drvReqt>>
    stereotype "Course assignation" AS course_assignation {
        {field} overview: As a registrar want to set in which term a course is available.
    }
    stereotype "Course" AS course {
        {field} overview: I as a registrar want to create/update/delete courses of the Commercial Software Engineering career.
    }
	course <.. course_dependency: <<drvReqt>>
	course +-- course_assignation
}

package "Enrollment Analysis" AS pk_enrollmentAnalysis {
    stereotype "Enrollment Hint" AS hint_clash_enrollment {
        {field} overview: If the system identifies an enrollment clash it should hint the user another timeslot, that is a the same class subject but in another timesslot.
    }
    stereotype "Enrollment clash alert" AS notification_clashStudentEnrollment {
        {field} overview: As a registrar I want to receive an alert when attempting to enroll an already booked student.
    }
    stereotype "Student timeslot availability evaluation" AS clash_studentEnrollment {
        {field} overview: Before enrolling student to class, system should verify if the student isn't already enrolled in another class at the same timeslot.
    }
	clash_studentEnrollment <.. notification_clashStudentEnrollment: <<drvReqt>>
	clash_studentEnrollment <.. hint_clash_enrollment: <<drvReqt>>
    stereotype "Course pass/fail forecasting hint" AS eligibility_forecasting {
        {field} overview: When opening next module, grading notes are not in yet, in this situation registrar office ponders if the student should be enrolled. System should do the forecasting based on GPA and SPA.
    }
    stereotype "Course dependency evaluation" AS eligibility_courseDepedency {
        {field} overview: I as a registrar want the sytem to notify me if a student doesn't have the necessary courses required to take the course.
    }
	eligibility_courseDepedency <.. eligibility_forecasting
    stereotype "Student eligibility status" AS student_eligibilityStatus {
        {field} overview: I as registrar want to have a view of a student eligibility, showing timeslot availability and pre-requisite course.
    }
	student_eligibilityStatus +-- eligibility_courseDepedency
	student_eligibilityStatus +-- clash_studentEnrollment
}

package "Student" {
    stereotype "Student filter" AS student_filter{
        {field} overview: I as a registrar want to filter my search of students according to: group, section, cohort, timezone and country.
    }
    stereotype "Student search" AS student_search {
        {field} overview: I as registrar want to search for an student.
    }
    stereotype "Student selection" AS student_selection {
        {field} overview: I as registrar want to select a student from a list, so that him/her would be enrolled to it.
    }
	student_selection +-- student_search
	student_selection +-- student_filter
}

package "Enrollment" AS pkg_enrollment {
    stereotype "Force enrollment" AS enrollment_forced {
        {field} overview: I as registrar want to forcibly enroll a student so that he/she can be enrolled because of a management decision.
		{field} A forced enrollment should have a justification.
		{field} Registrar should be able to select a pre-made justification.
    }
    stereotype "Notifications" AS notifications {
        {field} overview: I as registrar want to receive notifications when attempting to enroll a student and: student isn't available for timeslot, student doesn't have pre-requisite courses.
    }
    stereotype "Enrollment" AS enrollment {
        {field} overview: I as registrar want to enroll students in a class.
    }
	enrollment +-- enrollment_forced
	enrollment +-- notifications
}
pkg_enrollment +-- student_selection
pkg_enrollment +-- student_eligibilityStatus

package "Class" {
    stereotype "Teacher selection" AS class_teacherSelection {
        {field} overview: I as registrar want to select a teacher to teach a class, so that I can assign him/her.
		{field} The selection list should only contain the names of teachers that can give the class.
    }
    stereotype "Course selection" AS class_courseSelection {
        {field} overview: I as a registrar want to select a course to be imparted in the class.
    }
    stereotype "Class creation" AS class_creation {
        {field} overview: I as registrar want to create a new course either masterclass or faculty practitioner.
		{field} There are two kinds of classes:
        {field} Masterclass, given by a professor. A whole group of students attends the masterclass.
        {field} Practicioner class, given by an industry engineer. A section of students attends this class.
		{field} attributes: class name, teacher, students, timeslot, frequency.
    }
    class_creation +-- class_courseSelection
    class_creation +-- class_teacherSelection
    class_creation +-- pkg_enrollment

    stereotype "Class timeslot migration" AS class_timeslotMigration <<ActiveDevelopment>> {
        {field} overview: I as registrar want to change the timeslot of a class so that I can handle the teacher's request.
    }
    stereotype "Class" AS class_mgmt{
        {field} overview: I as registrar want to create/update/delete classes (masterclass and faculty practitioner class) of a course.
    }
    class_mgmt +-- class_creation
	class_mgmt +-- class_timeslotMigration
}
@enduml
    stereotype "" {
        {field} overview:
    }
